diff --git a/chapter4/validate.bst/ValidateBst.java b/chapter4/validate.bst/ValidateBst.java
index fc20166..2255e05 100644
--- a/chapter4/validate.bst/ValidateBst.java
+++ b/chapter4/validate.bst/ValidateBst.java
@@ -2,15 +2,22 @@
 	public static void main(String [] args) {
 		int[] array = new int[] {10, 20, 30, 40, 50, 60, 70, 80, 90, 100};
 		TreeNode root = createMinimalTree(array, 0, array.length - 1);
-		System.out.println("Tree is " + (isBst(root) ? "" : "not ") + "a BST");
+		System.out.println("Tree is " + (isBst(root, Integer.MIN_VALUE, Integer.MAX_VALUE) ? "" : "not ") + "a BST");
 		root.left.right.data = 25;
-		System.out.println("Tree is " + (isBst(root) ? "" : "not ") + "a BST");
+		System.out.println("Tree is " + (isBst(root, Integer.MIN_VALUE, Integer.MAX_VALUE) ? "" : "not ") + "a BST");
+		root.left.right.data = 55;
+		System.out.println("Tree is " + (isBst(root, Integer.MIN_VALUE, Integer.MAX_VALUE) ? "" : "not ") + "a BST");
+		root.left.right.data = 65;
+		System.out.println("Tree is " + (isBst(root, Integer.MIN_VALUE, Integer.MAX_VALUE) ? "" : "not ") + "a BST");
 	}

-	static boolean isBst(TreeNode root) {
+	static boolean isBst(TreeNode root, int min, int max) {
 		if(root != null) {
+			if(root.data < min || root.data > max) {
+				return false;
+			}
 			if((root.left != null ? (root.data > root.left.data ? true : false) : true) && (root.right != null ? (root.data < root.right.data ? true : false) : true)) {
-				return isBst(root.left) && isBst(root.right);
+				return isBst(root.left, min, root.data) && isBst(root.right, root.data, max);
 			} else {
 				return false;
 			}

